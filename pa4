#!/bin/bash

#To do: make sure that the value of bags is an integer and that the bag quantity does not exceed some value
# Make sure the the arrival and departure cities are not the same
# Develop function for getting all of the information ready to print
# fnx for detecting if a name already has a reservation
# fnx to remove above reservation, if it exists



# Removes the carriage return inserted by windows
remove_carriage (){
	echo `echo $1 | sed 's/\r//'` # Probably can remove outside echo and the backquotes
}

# Removes the slashes and rearranges the dates to be in yymmdd format
format_date (){
	#formatted_date=`echo $1 | sed "s/\(.*\)\/\(.*\)\/\(.*\)/\1\2\3/g"`
	#echo $formatted_date | od -c
	echo $1 | sed "s/\(.*\)\/\(.*\)\/\(.*\)/\3\1\2/g"

}
# Evaluates the formatted departure and arrival dates for validity - arrival date cannot be before the departure date, and the departure date must be after the current date
screen_dates (){
	#sets variable today to current date in the same format as formatted departure and return dates
	today=`date +%y%m%d`
	echo "Departure date is $formatted_departure"
	echo "Arrival date is $formatted_return"
	echo "today is $today"
	if [[ $formatted_departure -le $formatted_return && $formatted_departure -gt $today ]]
	then
		echo "valid travel dates"
	else
		echo "invalid travel dates"
	fi	
}

passenger_name=`zenity --entry --title="Traveler Name" --text="What is the traveler's name?"`	#Prompts user to enter a name.  Can play with options
departure_date=`zenity --calendar --text="What is the departure date?"`
return_date=`zenity --calendar --text="What is the return date?"`
bag_quant=`zenity --entry --title="Bags" --text="How many bags will you be bringing with you?"` 

#Removes carriage returns
passenger_name=`remove_carriage "$passenger_name"`
departure_date=`remove_carriage $departure_date`
return_date=`remove_carriage $return_date`
bag_quant=`remove_carriage $bag_quant`

#Formats dates for comparison
formatted_departure=`format_date $departure_date`
formatted_return=`format_date $return_date`

screen_dates
departure_city=`zenity --list --title="Select your departure city" --column="City" \
	"Portland" \
	"Seattle" \
	"Los Angeles" \
	"St. Paul" \
	"Miami" \
	"Norfolk" \
	"New york" `
departure_city=`remove_carriage "$departure_city"`

destination_city=`zenity --list --title="Select your departure city" --column="City" \
	"Portland" \
	"Seattle" \
	"Los Angeles" \
	"St. Paul" \
	"Miami" \
	"Norfolk" \
	"New york" `
destination_city=`remove_carriage "destination_city"`


presence=`grep ^"$passenger_name" test_file.txt`

if [[ $presence != '' ]]
then
	echo "The passenger already has booked a flight"
else
	echo "The passenger has not yet booked a flight"

	# This will allow for writing the information into the "reservations.txt" in the required format
	sep="|"
	super_var=$passenger_name$sep$departure_city$sep$destination_city$sep$departure_date$sep$return_date$sep$bag_quant
	echo $super_var
	echo $super_var >> test_file.txt
fi	





# use sed -n "/^$variable/p" to find out of an entry exists for that person. If so, use grep -v $variable > to write new file without that entry, then echo $variable >> reservations.txt to append the new scheduled trip.


# new idea: grep -v ^$variable reservations.txt temp.txt
# then copy temp.txt into reservations.txt to remove the reservation already under person's name.
# To append, use echo $reservation_info >> reservation.txt


#test_name="df"
#presence=`grep ^$test_name test_file.txt`
#echo $presence

#if [[ $presence != '' ]]
#then
	#echo grep -v ^$test bullshit.txt
#else
#	echo "cheese balls"
#fi	
