#!/bin/bash

# Removes the carriage return inserted by windows
remove_carriage (){
	echo `echo $1 | sed 's/\r//'` # Probably can remove outside echo and the backquotes
}

# Removes the slashes and rearranges the dates to be in yymmdd format
format_date (){
	#formatted_date=`echo $1 | sed "s/\(.*\)\/\(.*\)\/\(.*\)/\1\2\3/g"`
	#echo $formatted_date | od -c
	echo $1 | sed "s/\(.*\)\/\(.*\)\/\(.*\)/\3\1\2/g"

}


# Evaluates the formatted departure and arrival dates for validity - arrival date cannot be before the departure date, and the departure date must be after the current date
screen_dates (){

	#sets variable today to current date in the same format as formatted departure and return dates
	today=`date +%y%m%d`
	#echo "Departure date is $formatted_departure"
	#echo "Arrival date is $formatted_return"
	#echo "today is $today"

	#Checks to see that the departure date is not after the return date && that the departure date is not today or earlier
	if [[ $formatted_departure -le $formatted_return ]] && [[ $formatted_departure -gt $today ]]
	then
		#return 0
		echo 0
		return
	fi
	
	#Checks if the departing date is today or earlier (not allowed). Echoes -1 if so.
	if [[ $formatted_departure -le $today ]]
	then
		#return -1
		echo -1
		return
	fi
	
	#Checks if the return date is earlier than the departure date (not allowed). Echoes 1 if so.
	if [[ $formatted_return -lt $formatted_departure ]]
	then
		#return 1
		echo 1
		return
	fi
	
}


#Prompts user to enter the name of the passenger. If the user enters a non-empty string they will be asked if they want to reenter a name or quit the session
intake_passenger_name(){
	

	while [[ $passenger_name == '' ]]
	do

		passenger_name=`zenity --entry --title="Traveler Name" --text="What is the traveler's name?"`	#Prompts user to enter a name.  Can play with options
		passenger_name=`remove_carriage "$passenger_name"`	#Removes carriage return from the string


		#checks if string is empty
		if [[ $passenger_name == '' ]]

		then
			#Asks user if they mean to quit the session or retry entering valid name	
			zenity --question --text="Invalid passenger name..try again or quit?" \
				--ok-label="Try again" \
				--cancel-label="Quit"
			#interprets user input to previous question. Loop continues if "Try again", exits is "Quit"
			if [[ $? -eq 0 ]]
			then
				echo "Ok, trying again"
			else
				echo "Ok, canceling.."
				exit -1
			fi
		fi
	done


}	

intake_travel_dates(){

	while [[ 1 -eq 1 ]]
	do
		#Intakes travel dates from user	
		dates_first_pass	
		
		#Formats dates for comparison
		formatted_departure=`format_date $departure_date`
		formatted_return=`format_date $return_date`

		#Assigns the "return" values from screen_dates: 0 if the dates are valid, 1 if the arrival date is before departure, and -1 if the departure date is before today
		screen_value=$(screen_dates)
		
		#If the dates are valid, returns to main execution
		if [[ $screen_value -eq 0 ]]
		then
			return
		fi
		# Warns user of invalid dates and begins loop again
		if [[ $screen_value -eq 1 ]]
		then
			zenity --warning --text="You can't come back before you leave! Try again."
		fi
		#w Warns user of invalid dates and begins loop again	
		if [[ $screen_value -eq -1 ]]
		then
			zenity --warning --text="Time traveling is strictly prohibited. Please try again."
		fi
	done

}
#This fnx checks if the user pressed "cancel" on either of the flight date selection screens. If it detects the user did so, the user will be asked to either try again or quit the session. Subroutine of intake_travel_dates()
dates_first_pass(){

	departure_date=''
	return_date=''
	echo "inside first pass"	
	#Continues until neither of the travel dates are empty strings
	while [[ $departure_date == '' || $return_date == '' ]]
	do	
		departure_date=`zenity --calendar --text="What is the departure date?"`
		return_date=`zenity --calendar --text="What is the return date?"`

		#Removes carriage return
		departure_date=`remove_carriage $departure_date`
		return_date=`remove_carriage $return_date`

		#Checks if the user pressed "cancel" on one of the date selection screens. Offers chance to try again or quit session
		if [[ $departure_date == '' || $return_date == '' ]]
		then
			#Asks user if they mean to quit the session or retry entering valid dates	
			zenity --question --text="Invalid date selection..try again or quit?" \
				--ok-label="Try again" \
				--cancel-label="Quit"
		
			#interprets user input to previous question. Loop continues if "Try again", exits is "Quit"
			if [[ $? -eq 0 ]]
			then
				echo "Ok, trying again"
			else
				echo "Ok, canceling.."
				exit -1
			fi

		fi

	done
}

#Prompts user to input the number of bags they will be bringing for their trip
intake_bags(){

	#Infinite loop that only terminates when a valid quantity of bags is entered. Valid quantities are 0 through 3 inclusive
	while [[ 1 -eq 1 ]]
	do
		
		bags=`zenity --list --title="How many bags will you be bringing along?" --column="Number of bags" \
			"0" \
			"1" \
			"2" \
			"3"`
		
		bags=`remove_carriage $bags`
		echo $bags

	
		

	#0	echo $bags | od -c
	#	if [[ $bags -eq 0 ]] || [[ $bags -eq 1 ]] || [[ $bags -eq 2 ]] || [[ $bags -eq 3 ]]
	#	then
	#		return
	#	else
	#		zenity --warning --text="No more than 3 bags are allowed. Negative bag technology is also forbidden"		
	#	
	#	fi
	done
}



#program begins
#Initializes variables
passenger_name=''
departure_date=''
return_date=''


# Below is working
#intake_passenger_name
#intake_travel_dates

#In progress

intake_bags
echo $bags
